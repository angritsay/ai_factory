import React from 'react';
import { Button } from './ui/button';
import { CheckCircle, XCircle, Download, Eye, TrendingUp, AlertTriangle, Lightbulb, Target, Users, DollarSign } from 'lucide-react';

interface FinalSummaryProps {
  summary: {
    startupPitch: {
      name: string;
      problem: string;
      solution: string;
      market: string;
      businessModel: string;
      competitive: string;
      execution: string;
    };
    investmentVerdict: {
      decision: 'invest' | 'pass';
      confidence: number;
      reasoning: string;
      strengths: string[];
      concerns: string[];
      recommendedNext: string[];
    };
    conversationHistory: any[];
  };
}

export function FinalSummary({ summary }: FinalSummaryProps) {
  const { startupPitch, investmentVerdict } = summary;
  const isInvestment = investmentVerdict.decision === 'invest';

  const handleDownloadReport = () => {
    const report = `# Startup Evaluation Report

## ${startupPitch.name}

### Investment Decision: ${investmentVerdict.decision.toUpperCase()}
**Confidence:** ${investmentVerdict.confidence}%

**Investment Reasoning:**
${investmentVerdict.reasoning}

### Startup Overview

**Problem Statement:**
${startupPitch.problem}

**Solution:**
${startupPitch.solution}

**Target Market:**
${startupPitch.market}

**Business Model:**
${startupPitch.businessModel}

**Competitive Advantage:**
${startupPitch.competitive}

**Execution Strategy:**
${startupPitch.execution}

### Evaluation Summary

**Key Strengths:**
${investmentVerdict.strengths.map(s => `• ${s}`).join('\n')}

**Primary Concerns:**
${investmentVerdict.concerns.map(c => `• ${c}`).join('\n')}

**Recommended Next Steps:**
${investmentVerdict.recommendedNext.map((r, i) => `${i + 1}. ${r}`).join('\n')}

---
*Generated by AI Startup Evaluator*
    `;

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${startupPitch.name.toLowerCase().replace(/\s+/g, '-')}-evaluation.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleViewConversation = () => {
    console.log('Conversation History:', summary.conversationHistory);
    alert('Conversation history has been logged to the console. In a production environment, this would open a detailed conversation viewer.');
  };

  return (
    <div className="space-y-6">
      {/* Investment Decision */}
      <div className={`glass-card rounded-2xl p-8 border-2 ${
        isInvestment ? 'border-emerald-500/30 bg-emerald-500/5' : 'border-red-500/30 bg-red-500/5'
      }`}>
        <div className="flex items-start justify-between mb-6">
          <div className="flex items-center gap-4">
            <div className={`p-3 rounded-xl glass-subtle ${
              isInvestment ? 'text-emerald-600' : 'text-red-500'
            }`}>
              {isInvestment ? <CheckCircle className="h-6 w-6" /> : <XCircle className="h-6 w-6" />}
            </div>
            <div>
              <h2 className="text-foreground">
                {isInvestment ? 'Investment Approved' : 'Investment Declined'}
              </h2>
              <p className="text-foreground-muted mt-1">
                {investmentVerdict.confidence}% confidence level
              </p>
            </div>
          </div>
        </div>
        
        <div className="glass-subtle rounded-xl p-4 mb-6">
          <p className="text-foreground leading-relaxed">{investmentVerdict.reasoning}</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-emerald-600">
              <TrendingUp className="h-4 w-4" />
              <span className="text-sm">Key Strengths</span>
            </div>
            <div className="space-y-2">
              {investmentVerdict.strengths.map((strength, index) => (
                <div key={index} className="flex items-start gap-2">
                  <div className="w-1.5 h-1.5 rounded-full bg-emerald-500 mt-2 flex-shrink-0"></div>
                  <span className="text-sm text-foreground-muted">{strength}</span>
                </div>
              ))}
            </div>
          </div>
          
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-orange-500">
              <AlertTriangle className="h-4 w-4" />
              <span className="text-sm">Areas of Concern</span>
            </div>
            <div className="space-y-2">
              {investmentVerdict.concerns.map((concern, index) => (
                <div key={index} className="flex items-start gap-2">
                  <div className="w-1.5 h-1.5 rounded-full bg-orange-500 mt-2 flex-shrink-0"></div>
                  <span className="text-sm text-foreground-muted">{concern}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Refined Startup Pitch */}
      <div className="glass-card rounded-2xl p-8">
        <div className="flex items-center gap-3 mb-6">
          <div className="p-2 rounded-lg glass-subtle">
            <Lightbulb className="h-5 w-5 text-foreground-muted" />
          </div>
          <h3 className="text-foreground">Refined Concept: {startupPitch.name}</h3>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-4">
            <PitchSection 
              icon={AlertTriangle} 
              title="Problem" 
              content={startupPitch.problem}
              iconColor="text-orange-500"
            />
            <PitchSection 
              icon={CheckCircle} 
              title="Solution" 
              content={startupPitch.solution}
              iconColor="text-emerald-500"
            />
            <PitchSection 
              icon={Users} 
              title="Market" 
              content={startupPitch.market}
              iconColor="text-blue-500"
            />
          </div>
          
          <div className="space-y-4">
            <PitchSection 
              icon={DollarSign} 
              title="Business Model" 
              content={startupPitch.businessModel}
              iconColor="text-emerald-600"
            />
            <PitchSection 
              icon={Target} 
              title="Competitive Edge" 
              content={startupPitch.competitive}
              iconColor="text-violet-600"
            />
            <PitchSection 
              icon={TrendingUp} 
              title="Execution Plan" 
              content={startupPitch.execution}
              iconColor="text-indigo-500"
            />
          </div>
        </div>
      </div>

      {/* Next Steps */}
      <div className="glass-card rounded-2xl p-6">
        <h4 className="text-foreground mb-4">Recommended Next Steps</h4>
        <div className="space-y-3">
          {investmentVerdict.recommendedNext.map((step, index) => (
            <div key={index} className="flex items-start gap-3">
              <div className="glass-subtle rounded-lg px-2 py-1 mt-0.5">
                <span className="text-xs text-foreground-muted">{index + 1}</span>
              </div>
              <span className="text-sm text-foreground-muted">{step}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Actions */}
      <div className="flex gap-3 justify-center pt-4">
        <Button 
          onClick={handleDownloadReport} 
          className="glass text-foreground hover:bg-primary-glass border-0"
        >
          <Download className="h-4 w-4 mr-2" />
          Export Report
        </Button>
        <Button 
          variant="outline" 
          onClick={handleViewConversation}
          className="glass-subtle border-0 text-foreground-muted hover:text-foreground"
        >
          <Eye className="h-4 w-4 mr-2" />
          View Discussion
        </Button>
      </div>
    </div>
  );
}

function PitchSection({ icon: Icon, title, content, iconColor }: {
  icon: React.ElementType;
  title: string;
  content: string;
  iconColor: string;
}) {
  return (
    <div className="space-y-2">
      <div className="flex items-center gap-2">
        <Icon className={`h-4 w-4 ${iconColor}`} />
        <span className="text-sm text-foreground">{title}</span>
      </div>
      <div className="glass-subtle rounded-lg p-3">
        <p className="text-sm text-foreground-muted leading-relaxed">{content}</p>
      </div>
    </div>
  );
}